# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from __future__ import absolute_import



from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_EggNetExtension')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_EggNetExtension')
    _EggNetExtension = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_EggNetExtension', [dirname(__file__)])
        except ImportError:
            import _EggNetExtension
            return _EggNetExtension
        try:
            _mod = imp.load_module('_EggNetExtension', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _EggNetExtension = swig_import_helper()
    del swig_import_helper
else:
    import _EggNetExtension
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def relu_float_inplace(x: 'float *') -> "int":
    return _EggNetExtension.relu_float_inplace(x)
relu_float_inplace = _EggNetExtension.relu_float_inplace

def relu_double_inplace(x: 'double *') -> "int":
    return _EggNetExtension.relu_double_inplace(x)
relu_double_inplace = _EggNetExtension.relu_double_inplace

def relu_int8_t_inplace(x: 'int8_t *') -> "int":
    return _EggNetExtension.relu_int8_t_inplace(x)
relu_int8_t_inplace = _EggNetExtension.relu_int8_t_inplace

def relu_int16_t_inplace(x: 'int16_t *') -> "int":
    return _EggNetExtension.relu_int16_t_inplace(x)
relu_int16_t_inplace = _EggNetExtension.relu_int16_t_inplace

def relu_int32_t_inplace(x: 'int32_t *') -> "int":
    return _EggNetExtension.relu_int32_t_inplace(x)
relu_int32_t_inplace = _EggNetExtension.relu_int32_t_inplace

def relu_int64_t_inplace(x: 'int64_t *') -> "int":
    return _EggNetExtension.relu_int64_t_inplace(x)
relu_int64_t_inplace = _EggNetExtension.relu_int64_t_inplace

def relu_uint8_t_inplace(x: 'uint8_t *') -> "int":
    return _EggNetExtension.relu_uint8_t_inplace(x)
relu_uint8_t_inplace = _EggNetExtension.relu_uint8_t_inplace

def relu_uint16_t_inplace(x: 'uint16_t *') -> "int":
    return _EggNetExtension.relu_uint16_t_inplace(x)
relu_uint16_t_inplace = _EggNetExtension.relu_uint16_t_inplace

def relu_uint32_t_inplace(x: 'uint32_t *') -> "int":
    return _EggNetExtension.relu_uint32_t_inplace(x)
relu_uint32_t_inplace = _EggNetExtension.relu_uint32_t_inplace

def relu_uint64_t_inplace(x: 'uint64_t *') -> "int":
    return _EggNetExtension.relu_uint64_t_inplace(x)
relu_uint64_t_inplace = _EggNetExtension.relu_uint64_t_inplace

def conv2d_float(data_in: 'float const *', kernel: 'float const *', stride: 'int') -> "int *":
    return _EggNetExtension.conv2d_float(data_in, kernel, stride)
conv2d_float = _EggNetExtension.conv2d_float

def conv2d_double(data_in: 'double const *', kernel: 'double const *', stride: 'int') -> "int *":
    return _EggNetExtension.conv2d_double(data_in, kernel, stride)
conv2d_double = _EggNetExtension.conv2d_double

def conv2d_int8_t(data_in: 'int8_t const *', kernel: 'int8_t const *', stride: 'int') -> "int *":
    return _EggNetExtension.conv2d_int8_t(data_in, kernel, stride)
conv2d_int8_t = _EggNetExtension.conv2d_int8_t

def conv2d_int16_t(data_in: 'int16_t const *', kernel: 'int16_t const *', stride: 'int') -> "int *":
    return _EggNetExtension.conv2d_int16_t(data_in, kernel, stride)
conv2d_int16_t = _EggNetExtension.conv2d_int16_t

def conv2d_int32_t(data_in: 'int32_t const *', kernel: 'int32_t const *', stride: 'int') -> "int *":
    return _EggNetExtension.conv2d_int32_t(data_in, kernel, stride)
conv2d_int32_t = _EggNetExtension.conv2d_int32_t

def conv2d_int64_t(data_in: 'int64_t const *', kernel: 'int64_t const *', stride: 'int') -> "int *":
    return _EggNetExtension.conv2d_int64_t(data_in, kernel, stride)
conv2d_int64_t = _EggNetExtension.conv2d_int64_t

def conv2d_uint8_t(data_in: 'uint8_t const *', kernel: 'uint8_t const *', stride: 'int') -> "int *":
    return _EggNetExtension.conv2d_uint8_t(data_in, kernel, stride)
conv2d_uint8_t = _EggNetExtension.conv2d_uint8_t

def conv2d_uint16_t(data_in: 'uint16_t const *', kernel: 'uint16_t const *', stride: 'int') -> "int *":
    return _EggNetExtension.conv2d_uint16_t(data_in, kernel, stride)
conv2d_uint16_t = _EggNetExtension.conv2d_uint16_t

def conv2d_uint32_t(data_in: 'uint32_t const *', kernel: 'uint32_t const *', stride: 'int') -> "int *":
    return _EggNetExtension.conv2d_uint32_t(data_in, kernel, stride)
conv2d_uint32_t = _EggNetExtension.conv2d_uint32_t

def conv2d_uint64_t(data_in: 'uint64_t const *', kernel: 'uint64_t const *', stride: 'int') -> "int *":
    return _EggNetExtension.conv2d_uint64_t(data_in, kernel, stride)
conv2d_uint64_t = _EggNetExtension.conv2d_uint64_t

def NNE_print_error(code: 'int') -> "char const *":
    return _EggNetExtension.NNE_print_error(code)
NNE_print_error = _EggNetExtension.NNE_print_error

def conv2d(data_in: 'float const *', kernel: 'float const *', stride: 'int') -> "int *":
    return _EggNetExtension.conv2d(data_in, kernel, stride)
conv2d = _EggNetExtension.conv2d

def conv2d_3x3(data_in: 'float const *', kernel: 'float const *') -> "int *":
    return _EggNetExtension.conv2d_3x3(data_in, kernel)
conv2d_3x3 = _EggNetExtension.conv2d_3x3

def conv2d_3x3_shift(data_in: 'uint8_t const *', kernel_shift: 'uint8_t const *', kernel_sign: 'uint8_t const *', bias: 'int16_t const *', input_exponent: 'int', kernel_out_exponent: 'int', channel_out_exponent: 'int', stride: 'int') -> "int *":
    return _EggNetExtension.conv2d_3x3_shift(data_in, kernel_shift, kernel_sign, bias, input_exponent, kernel_out_exponent, channel_out_exponent, stride)
conv2d_3x3_shift = _EggNetExtension.conv2d_3x3_shift

def maxPool2D(data_in: 'float const *') -> "int *":
    return _EggNetExtension.maxPool2D(data_in)
maxPool2D = _EggNetExtension.maxPool2D

def relu1D(x: 'float *') -> "int":
    return _EggNetExtension.relu1D(x)
relu1D = _EggNetExtension.relu1D

def relu2D(x2: 'float *') -> "int":
    return _EggNetExtension.relu2D(x2)
relu2D = _EggNetExtension.relu2D

def relu3D(x3: 'float *') -> "int":
    return _EggNetExtension.relu3D(x3)
relu3D = _EggNetExtension.relu3D

def relu4D(x4: 'float *') -> "int":
    return _EggNetExtension.relu4D(x4)
relu4D = _EggNetExtension.relu4D
# This file is compatible with both classic and new-style classes.


